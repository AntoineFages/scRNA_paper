#!/usr/bin/env Rscript
#Script 18. R script for modelling evolution of gene expression of ecologically relevant genes

library(Seurat)
library(dplyr)
library(stats)
library(ape)
library(reshape2)
library(geomorph)
library(caper)
library(geiger)
library(nlme)
lbrary(geomorph)
library(tidyr)

##### Read input files #####

#Matrices of log(cpm) within each cell population
lograwCounts<-readRDS(paste0(path_to_output_of_integration,'logcpm_byCellType.rds'))

#List of cell populations associated with these
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells',
            'enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2',
            'T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
CellTypes <- CellTypes[-c(13,18,20,21,23,24)]

#Restrict to genes expressed in at least 10% of cells to avoid genes that are only sporadically expressed
genes_Prct_CellTypes <- readRDS(paste0(path_to_output_of_integration,'genes_PrctExpr.rds'))
genes_10Prct <- lapply(genes_Prct_CellTypes, function(x) x[x$Cell_proportion > 0.1,])
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,colnames(lograwCounts[[i]]) %in% genes_10Prct[[i]]$Markers])

##Time-calibrated species tree
tree <- readRDS(paste0(path_to_output_of_integration,'tree_byCellType.rds'))
tree_enterocytes1 <- tree[[1]]

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))

#Make sure order of ecological predictors and data match order of tree tips
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][tree[[i]]$tip.label,])
ecological_predictors <- lapply(lograwCounts, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors <- lapply(seq_along(ecological_predictors), function(i) ecological_predictors[[i]][tree[[i]]$tip.label,])

#Input ecologically relevant genes
predictors <- c('d15N','d13C','ratio','LPJ_PC2','oral_PC1','diet_ecology_vector')
intersects <- readRDS(paste0(path_to_output_of_integration,'enterocytes1_intersect.rds'))

#Create matrix of cpm for enterocytes 1 that do not contain 0
enterocytes1 <- lograwCounts[[1]]
enterocytes1 <- enterocytes1[,colSums(enterocytes1>0)==nrow(enterocytes1)]
enterocytes1_intersect <- lapply(seq_along(predictors), function(i)  enterocytes1[,colnames(enterocytes1) %in% intersects[[i]]])

#Input of results of 2B-PLS
PLS_results <- readRDS(paste0(path_to_output_of_integration,'2BPLS_results.rds'))

#Input inferred trait evolution trees for each ecological predictor
tree_d15N <- read.tree('XXX')
tree_d13C <- read.tree('XXX')
tree_gut <- read.tree('XXX')
tree_LPJ <- read.tree('XXX')
tree_OJ <- read.tree('XXX')
tree_dietEcology <- read.tree('XXX')

#Combine all trees into one list of trees
tree_predictors <- list(tree_d15N,tree_d13C,tree_gut,tree_LPJ,tree_OJ,tree_dietEcology)

#Function to visualise rates of evolution on a phylogenetic tree, courtesy of Julien Clavel
plotShifts <- function(phylo, rates,...){
    #require(fields)
    #if(!attr(phylo,"order")=="cladewise") phylo = reorder.phylo(phylo, "cladewise")
    
    args <- list(...)
    # options
    if(is.null(args[["fun"]])) args$fun <- mean
    if(is.null(args[["show.tip.label"]])) args$show.tip.label <- TRUE
    if(is.null(args[["horizontal"]])) args$horizontal <- TRUE
    if(is.null(args[["color"]])) args$color <- c("blue", "red")
    if(is.null(args[["log"]])) args$log <- FALSE
    if(is.null(args[["palette"]])) args$palette <- FALSE
    if(is.null(args[["main"]])) args$main <- NULL
    if(is.null(args[["cex"]])) args$cex <- 0.5
    if(is.null(args[["width"]])) args$width <- 2
    
    
    # plot the rates?
    if(args$log==TRUE) rates <- log(rates)
    
    # colors mapping
    if(any(args$palette==FALSE)){
      #Colors = colorRampPalette(args$color)( 100 )
      #Colors = colorRampPalette(c("grey","yellow","red","red4","#2D0808"))(100)
      Colors = inferno(100)
    }else{
      Colors = args$palette
    }
    
    #change color to something different
    
    # 0 index induce error I scale it between 1 and 100
    linScale <- function(x, from, to) round( (x - min(x)) / max(x - min(x)) * (to - from) + from)
    col <- linScale(rates, from=1, to=100)
    
    #if(args$scale==TRUE){
    #  phylo$edge.length <- phylo$edge.length*rates
    #  }
    
    
    plot(phylo, edge.color = Colors[col], show.tip.label = args$show.tip.label, main = args$main, cex = args$cex, edge.width = args$width)
    
    image.plot(z = as.matrix(rates),col = Colors,
               legend.only = TRUE, horizontal = args$horizontal)
    #return(p)
    
  }

##### Find correlations between tip values in traits and in gene sets correlating with these traits #####

#First check whether loadings are positive or negative: are genes correlating positively or negatively with traits
vector_multiply <- lapply(seq_along(enterocytes1_intersect), function(i) unlist(lapply(colnames(enterocytes1_intersect[[i]]), function(x) PLS_results[[i]][[1]]$left.pls.vectors[x,])))
vector_multiply <- lapply(vector_multiply, function(y) unlist(lapply(y, function(x) x/abs(x))))
vector_pos <- lapply(vector_multiply, function(x) x[x>0])
vector_neg <- lapply(vector_multiply, function(x) x[x<0])

#Subset cpm matrices based on these two types of genes
matrix_pos <- lapply(seq_along(enterocytes1_intersect), function(i) enterocytes1_intersect[[i]][,names(vector_pos[[i]])])
matrix_neg <- lapply(seq_along(enterocytes1_intersect), function(i) enterocytes1_intersect[[i]][,names(vector_neg[[i]])])

#Create complement matrix for the genes correlating negatively
matrix_neg_complement <- lapply(matrix_neg, function(x) do.call('cbind',((lapply(seq_along(1:ncol(x)), function(i) unlist(lapply (x[,i], function(y) max(x[,i]) + min(x[,i]) - y)))))))
for (i in 1:6) { colnames(matrix_neg_complement[[i]]) <- colnames(matrix_neg[[i]])}
matrix_combined <- lapply(seq_along(matrix_pos), function(i) cbind(matrix_pos[[i]],matrix_neg_complement[[i]]))

#Get mean value for each gene set
matrix_combined_rowMeans <- lapply(matrix_combined, function(x) rowMeans(x))

#Combine trait values and gene expression mean values in one table
combined_corr <- as.data.frame(do.call(cbind, matrix_combined_rowMeans))
combined_corr <- cbind(combined_corr,ecological_predictors[[1]])

#Estimate ancestral states and rates of evolution
function_rate_contMap <- function(Matrix,i) {
  aux <- unlist(list(as.numeric(as.matrix(Matrix)[,i])))
  names(aux) <- rownames(Matrix)
  obj_aux <- contMap(tree_predictors[[i]],aux,plot=FALSE)
  rates <- unlist(lapply(obj_aux$tree$maps, function(x) abs(max(as.numeric(names(x)))-min(as.numeric(names(x))))))
  return(rates)
}

#Obtain rates of evolution for each ecological predictor too
rates_predictors <-lapply(seq_along(tree_predictors), function(i) tree_predictors[[i]]$edge.length/tree_enterocytes1$edge.length)

#Plot these rates on the species time-calibrated tree for each ecological predictor
function_plot_combined_rates <- function(i) {
  rates_combined <-function_rate_contMap(combined_corr,i)
  par(mfrow = c(1, 2))
  plotShifts(tree_enterocytes1,rates_predictors[[i]])
  plotShifts(tree_enterocytes1,rates_combined)
  mtext(paste0(predictors[[i]]," vs Gene Expression rates"), side = 3, line = - 2, outer = TRUE)
}
function_plot_combined_rates(1)
function_plot_combined_rates(2)
function_plot_combined_rates(3)
function_plot_combined_rates(4)
function_plot_combined_rates(5)
function_plot_combined_rates(6)




