#!/usr/bin/env Rscript
#Script 4. R script for integration of Seurat object across species

library(Seurat)
library(dplyr)
library(MAST)

list_of_samples <- readLines('XXX') #path to the list of samples
path_to_output_of_integration <- 'XXX' #path to put the output of integration

#loop through the paths to create list of Seurat objects
my.se <- lapply(paste0(path_to_output_of_clustering,list_of_samples,'_Clusters.rds'),readRDS)

##### Integration #####
features <- SelectIntegrationFeatures(object.list = my.se, nfeatures = 5000) #Select features that are repeatedly variable across datasets for integration
my.se <- PrepSCTIntegration(object.list = my.se, anchor.features = features)

#Reference-based integration, using 8 samples as references
my.se.anchors <- FindIntegrationAnchors(object.list = my.se, normalization.method = "SCT",reference=c(1,4,7,10,13,16,19,22),anchor.features = features) #integration through references
my.se.integrated <- IntegrateData(anchorset = my.se.anchors, normalization.method = "SCT",features.to.integrate=features)

#Cell-cycle scoring
cell_cycle_genes<-read.csv('XXX') #the csv should contain a list of genes to be used for cell cycle correction
colnames(cell_cycle_genes)<-c("phase","gene_name","date")
s_genes<- cell_cycle_genes %>% dplyr::filter(phase == "S") %>% pull("gene_name")
g2m_genes <- cell_cycle_genes %>% dplyr::filter(phase == "G2/M") %>% pull("gene_name")
my.se.integrated <- CellCycleScoring(my.se.integrated,g2m.features = g2m_genes,s.features = s_genes,set.ident = TRUE)
my.se.integrated$CC.Difference <- my.se.integrated$S.Score - my.se.integrated$G2M.Score

#Scale data in integrated assay
my.se.integrated <- ScaleData(my.se.integrated vars.to.regress=c("percent.mt","percent.rb","nCount_RNA","CC.Difference"),features=rownames(my.se.integrated))

#Scale data in RNA assay
DefaultAssay(combined.sct)<-"RNA"
my.se.integrated <- NormalizeData(my.se.integrated,block.size=25000,assay="RNA")
my.se.integrated <- FindVariableFeatures(my.se.integrated,nfeatures=5000,assay="RNA")
my.se.integrated <- ScaleData(my.se.integrated, vars.to.regress=c("percent.mt","percent.rb","nCount_RNA","CC.Difference"),features=rownames(my.se.integrated))
my.se.integrated <- RunPCA(object=my.se.integrated,assay="RNA",npcs=50,verbose=FALSE)

#Clustering of integrated dataset
DefaultAssay(my.se.integrated) <- "integrated"
my.se.integrated <- RunPCA(my.se.integrated, npcs=100, verbose = FALSE)
my.se.integrated <- FindNeighbors(my.se.integrated, reduction = "pca", dims = 1:100)
my.se.integrated <- FindClusters(my.se.integrated, resolution = 3)
dims=c(1:100)
my.se.integrated <- RunUMAP(my.se.integrated, reduction = "pca", dims = 1:100)

saveRDS(my.se.integrated, file= paste0(path_to_output_of_integration,'integrated_dataset.rds'))





