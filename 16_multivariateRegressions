#!/usr/bin/env Rscript
#Script 16. R script for testing associations between epithelial relative abundances and gene expression signatures

library(Seurat)
library(mvMORPH)
library(ggplot)
library(ggtree)
library(dplyr)
library(stats)
library(ape)
library(reshape2)
library(viridis)
library(cowplot)
library(grid)
library(gridExtra)
library(geomorph)

##### Read input files #####

#Genes expressed
genes_Prct_CellTypes <- readRDS('XXX') #list of tables containing the % of cells expressing each gene within each cell population

#scWGCNA module data
Module_genes <- readRDS('XXX') #
module_numbers<-c(1:25)

#Vector of cell population in which module expression is the highest, for each scWGCNA module
Highest_expression <- c('cycling cells','mesenchymal cells','LREs','enterocytes 1','T cells 3','macrophages 1','enterocytes 1',
                        'macrophages 1','enterocytes 2','DCs','eosinophils','epithelial DCs','Tuft cells','B cells 1','enterocytes 1',
                        'enterocytes 1','enterocytes 1','enteroendocrine cells','goblet cells','Tuft cells','BEST4 cells',
                        'none','enteroendocrine cells','mesenchymal cells','macrophages 1')

#Remove uninformative scWGCNA modules: 1 (cycling cells), 11 (eosinophils) and 22 (too widespread)
Module_genes <- Module_genes[-c(1,11,22)]
Highest_expression <- Highest_expression[-c(1,11,22)]
module_numbers <- module_numbers[-c(1,11,22)]


#Cell population-specific genes
genes_spe <- readRDS(paste0(path_to_output_of_integration,'genes_specific.rds'))

#cpm pseudobulk data
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells',
            'enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2',
            'T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')

cpm <- readRDS('XXX')
rawCounts <- lapply(seq_along(CellTypes), function(i) cpm[,grep(CellTypes[[i]],colnames(cpm))])
rawCounts[[10]] <- rawCounts[[10]][,-(grep(CellTypes[[9]],colnames(rawCounts[[10]])))]

#Remove outliers with low number of reads
rawCounts[[2]] <- rawCounts[[2]][,-(grep('Julorn',colnames(rawCounts[[2]])))]
rawCounts[[3]] <- rawCounts[[3]][,-(grep('Hapmic',colnames(rawCounts[[3]])))]
rawCounts[[5]] <- rawCounts[[5]][,-(grep('Julorn',colnames(rawCounts[[5]])))]
rawCounts[[10]] <- rawCounts[[10]][,-(grep('Cphfro',colnames(rawCounts[[10]])))]
rawCounts[[10]] <- rawCounts[[10]][,-(grep('Julorn',colnames(rawCounts[[10]])))]
rawCounts[[20]] <- rawCounts[[20]][,-(grep('Julorn',colnames(rawCounts[[20]])))]

#Allow more max 50% of 0 for each gene and rename column names
rawCounts <- lapply(rawCounts, function(x) x[rowSums(x>0)>ncol(x)/2,])
new_cols <-lapply(colnames(rawCounts_all), function(x) strsplit(x,split = '_')[[1]][[1]])
colnames(rawCounts_all) <- unlist(new_cols)
for (i in 1:length(rawCounts)){ colnames(rawCounts[[i]]) <- sub(".*_", "", colnames(rawCounts[[i]]))}

#Remove cell populations for which too few species are represented by 20 cells or more
rawCounts <- rawCounts[-c(13,18,20,21,23,24)]
CellTypes <- CellTypes[-c(13,18,20,21,23,24)]
genes_spe <- genes_spe[-c(13,18,20,21,23,24)]

#Remove blank spaces from CellTypes object
Cell_Types<-sub(" ", "_", CellTypes)
Cell_Types<-sub(" ", "_", Cell_Types)

#List of species included
species <- c("Batfer","Benhor","Boumic","Calple","Cphfro","Ctehor","Cypcol","Erecya","Hapmic","Julorn","Lepatt","Lepelo",
             "Limdar","Neobre","Neobri","Orenil","Permic","Petort","Simdia","Telvit","Trezeb","Trioto","Tromoo","Xenspi")

#Log transformation of cpm and exclude Astbur and Orenil (not in the radiation)
lograwCounts <- lapply(rawCounts, function(x) log2(x+1))
exclude_species <- c('Astbur','Orenil')
lograwCounts <- lapply(lograwCounts, function(x) x[,!(colnames(x) %in% exclude_species)])


##### Prepare the 3 gene sets for multivariate phylogenetic regressions ##### 
#'Global' gene set: for now, I take the overall lograwCounts object

#'Specific' gene set: genes that are cell population-specific
lograwCounts_spe <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][rownames(lograwCounts[[i]]) %in% names(genes_spe[[i]]),])
names(lograwCounts_spe) <- CellTypes

#'scWGCNA module' gene set: genes in scWGCNA co-expression modules
names(lograwCounts) <- CellTypes
lograwCounts_modules <- lapply(Highest_expression, function(x) lograwCounts[[x]])
lograwCounts_modules <- lograwCounts_modules[lengths(lograwCounts_modules) != 0]
lograwCounts_modules <- lapply(seq_along(lograwCounts_modules), function(i) lograwCounts_modules[[i]][rownames(lograwCounts_modules[[i]]) %in% Module_genes[[i]],])
lograwCounts_modules <- lapply(lograwCounts_modules, function(x) na.omit(x))

#Input species time-calibrated trees and 
tree_raw<-read.tree('XXX') #phylogenetic tree from Ronco et al. (2021)
exclude <- lapply(lograwCounts, function(x) tree_raw$tip.label[! tree_raw$tip.label %in% colnames(x)])
tree <- lapply(exclude, function(x) ape::drop.tip(phy=tree_raw, tip=x, root.edge = F, rooted = is.rooted(tree_raw)))
exclude_spe<- lapply(lograwCounts_spe, function(x) tree_raw$tip.label[! tree_raw$tip.label %in% colnames(x)])
tree_spe <- lapply(exclude_spe, function(x) ape::drop.tip(phy=tree_raw, tip=x, root.edge = F, rooted = is.rooted(tree_raw)))
exclude_modules <- lapply(lograwCounts_modules, function(x) tree_raw$tip.label[! tree_raw$tip.label %in% colnames(x)])
tree_modules <- lapply(exclude_modules, function(x) ape::drop.tip(phy=tree_raw, tip=x, root.edge = F, rooted = is.rooted(tree_raw)))

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))
ecological_predictors_global <- lapply(lograwCounts, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors_spe <- lapply(lograwCounts_spe, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors_modules <- lapply(lograwCounts_modules, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])

#Reorder cpm matrices and ecological predictors according to tree tips
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,tree[[i]]$tip.label])
lograwCounts_spe <- lapply(seq_along(lograwCounts_spe), function(i) lograwCounts_spe[[i]][,tree_spe[[i]]$tip.label])
lograwCounts_modules <- lapply(seq_along(lograwCounts_modules), function(i) lograwCounts_modules[[i]][,tree_modules[[i]]$tip.label])

ecological_predictors_global <- lapply(seq_along(ecological_predictors_global), function(i) ecological_predictors_global[[i]][tree[[i]]$tip.label,])
ecological_predictors_spe <- lapply(seq_along(ecological_predictors_spe), function(i) ecological_predictors_spe[[i]][tree_spe[[i]]$tip.label,])
ecological_predictors_modules <- lapply(seq_along(ecological_predictors_modules), function(i) ecological_predictors_modules[[i]][tree_modules[[i]]$tip.label,])

#Transpose matrices
lograwCounts <- lapply(lograwCounts, function(x) t(x))
lograwCounts_spe <- lapply(lograwCounts_spe, function(x) t(x))
lograwCounts_modules <- lapply(lograwCounts_modules, function(x) t(x))


##### run mvMORPH ##### 
#'Global' gene set: genes expressed in at least 20% of cells within each cell population
genes_20Prct <- lapply(genes_Prct_CellTypes, function(x) x[x$Cell_proportion > 0.2,])
lograwCounts_20Prct <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,colnames(lograwCounts[[i]]) %in% genes_20Prct[[i]]$Markers])

#Function to run mvMORPH under a Brownian Motion with a Pagel's lambda tree transformation
fit_function_unique_predictor_lambda <- function(Data,Si,Tree,i) {
        fit.d15N <- mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,a,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        fit.d13C <-mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,b,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        fit.gutRatio <- mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,c,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        fit.LPJ_PC2 <- mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,d,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        fit.oral_PC1 <- mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,e,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        fit.diet_ecology_vector <- mvgls(X ~ si,data=list(X=as.matrix(Data[[i]]),si=as.matrix(Si[[i]][,f,drop=F])),Tree[[i]],model = "lambda",method="PL",error=FALSE)
        return(list(fit.d15N,fit.d13C,fit.gutRatio,fit.LPJ_PC2,fit.oral_PC1,fit.diet_ecology_vector))
}

#Run the function for each gene set
fit_lambda_list_global <- lapply(seq_along(length(lograwCounts_20Prct)), function(i) fit_function_unique_predictor_lambda(lograwCounts_20Prct,ecological_predictors_global,tree,i))
fit_lambda_list_spe <- lapply(seq_along(length(lograwCounts_spe)), function(i) fit_function_unique_predictor_lambda(lograwCounts_spe,ecological_predictors_spe,tree,i))
fit_lambda_list_modules <- lapply(seq_along(length(lograwCounts_modules)), function(i) fit_function_unique_predictor_lambda(lograwCounts_modules,ecological_predictors_modules,tree,i))

#Function to run MANOVA on each fitted object
function_manova <- function(fit.list) {
        manova.d15N <- manova.gls(fit.list[[1]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        manova.d13C <- manova.gls(fit.list[[2]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        manova.gutRatio <- manova.gls(fit.list[[3]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        manova.LPJ_PC2 <- manova.gls(fit.list[[4]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        manova.oral_PC1 <- manova.gls(fit.list[[5]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        manova.diet_ecology_vector <- manova.gls(fit.list[[6]], type='II',test='Pillai',nperm=1000L,ncores=40L)
        list.manova <- list(manova.d15N,manova.d13C,manova.gutRatio,manova.LPJ_PC2,manova.oral_PC1,manova.diet_ecology_vector)
        return(list.manova)
}

#Run the function for each gene set
manova_lambda_global <- lapply(seq_along(length(lograwCounts_20Prct)), function(i) function_manova(fit_lambda_list_global[[i]]))
manova_lambda_spe <- lapply(seq_along(length(lograwCounts_spe)), function(i) function_manova(fit_lambda_list_spe[[i]]))
manova_lambda_modules <- lapply(seq_along(length(lograwCounts_modules)), function(i) function_manova(fit_lambda_list_modules[[i]]))

#Function to invert order of cell populations and predictors in manova lists
function_invert <- function(manova_list){
    result <- list()
    for (i in 1:length(manova_list[[1]])) {
        result[[i]] <- list()
        for (j in 1:length(manova_list)) {
              result[[i]][[j]] <- manova_list[[j]][[i]]
        }
    }
}

#Use this function for all 3 gene sets
manova_lambda_global <- function_invert(manova_lambda_global)
manova_lambda_spe <- function_invert(manova_lambda_spe)
manova_lambda_modules <- function_invert(manova_lambda_modules)


##### Plot results of multivariate phylogenetic regressions ##### 
name_predictors <- c('d15N','d13C','gut_ratio','LPJ_PC2','oral_PC1','diet_ecology_vector')

#Get p-values
pval_global <- lapply(manova_lambda_global, function(x) unlist(lapply(x, function(y) y$pvalue)))
pval_spe <- lapply(manova_lambda_spe, function(x) unlist(lapply(x, function(y) y$pvalue)))
pval_modules <- lapply(manova_lambda_modules, function(x) unlist(lapply(x, function(y) y$pvalue)))

#Get Pillai's statistics
Pillai_global <- lapply(manova_lambda_global, function(x) unlist(lapply(x, function(y) y$stat)))
Pillai_spe <- lapply(manova_lambda_spe, function(x) unlist(lapply(x, function(y) y$stat)))
Pillai_modules <- lapply(manova_lambda_modules, function(x) unlist(lapply(x, function(y) y$stat)))

#Combine p-values in data frames
df_pval_global <- do.call('rbind',lapply(seq_along(pval_global), function(i) data.frame(celltype=CellTypes,pval=pval_global[[i]],predictor=name_predictors[[i]])))
df_pval_global$geneset <- 'global'
df_pval_spe <- do.call('rbind',lapply(seq_along(pval_spe), function(i) data.frame(celltype=CellTypes,pval=pval_spe[[i]],predictor=name_predictors[[i]])))
df_pval_spe$geneset <- 'spe'
df_pval_modules <- do.call('rbind',lapply(seq_along(pval_modules), function(i) data.frame(celltype=CellTypes,pval=pval_modules[[i]],predictor=name_predictors[[i]])))
df_pval_modules$geneset <- 'modules'

#Combine Pillai's statistics in data frames
df_Pillai_global <- do.call('rbind',lapply(seq_along(Pillai_global), function(i) data.frame(celltype=CellTypes,stat=Pillai_global[[i]],predictor=name_predictors[[i]])))
df_Pillai_global$geneset <- 'global'
df_Pillai_spe <- do.call('rbind',lapply(seq_along(Pillai_spe), function(i) data.frame(celltype=CellTypes,stat=Pillai_spe[[i]],predictor=name_predictors[[i]])))
df_Pillai_spe$geneset <- 'spe'
df_Pillai_modules <- do.call('rbind',lapply(seq_along(Pillai_modules), function(i) data.frame(celltype=CellTypes,stat=Pillai_modules[[i]],predictor=name_predictors[[i]])))
df_Pillai_modules$geneset <- 'modules'

#Combine in one dataframe per gene set
levels_predictors <- c('d15N','gut_ratio','LPJ_PC2','diet_ecology_vector','d13C','oral_PC1')
function_combine <- function(df_Pillai, df_pval,) {
    df <- cbind(df_Pillai,df_pval)
    df$celltype <- factor(df$celltype)
    df$logpval <- -log10(df$pval)
    df <- df[,c(1,2,3,4,9)]  #Keep only relevant columns
    df$sig <- FALSE
    df[df$logpval>1.3,]$sig <- TRUE #mark statistically significant correlations
    df$predictor <- factor(df$predictor,levels=levels_predictors)
    return(df)
}

#Use this function on each gene set
df_global <- function_combine(df_Pillai_global,df_pval_global)
df_spe <- function_combine(df_Pillai_spe,df_pval_spe)
df_modules <-  function_combine(df_Pillai_modules,df_pval_modules)

#Plot DotPlot and hierarchical clustering based on -10log(pval)
function_plot <- function(df) {
    df2 <- df[,-c(2,4,6)]
    df2 <- dcast(df2,formula = celltype ~ predictor)
    rownames(df2) <- df2$celltype
    df2 <- df2[,-c(1)]
    clust <- hclust(dist(df2 %>% as.matrix())) # hclust with distance matrix
    ddgram <- as.dendrogram(clust) # create dendrogram
    ggtree_plot <- ggtree::ggtree(ddgram)  + coord_flip() + scale_x_reverse() #plot hierarchical clustering

    #plot the main plot
    main_plot <- ggplot(df,aes(x=factor(celltype,levels=rev(get_taxa_name(ggtree_plot))),y=factor(predictor,levels=levels_predictors),color=logpval,size=stat)) + 
    theme_classic() + geom_point() +scale_size_continuous(limits = c(0.3,1)) + geom_point(data=df,col='red',stroke=1,aes(shape=sig)) + 
    scale_shape_manual(values=c(NA,21)) + scale_color_gradient2(low="white",mid="grey",high="black",midpoint=1.5,limits=c(0,3)) + RotatedAxis() + 
    xlab('') + ylab('') + theme(axis.line=element_blank(),axis.ticks=element_blank()) + NoLegend()

    #Assemble and print the two plots
    print(plot_grid(ggtree_plot, main_plot, nrow = 2, rel_heights = c(0.2,2), align = 'v'))
}

#Use this function on each gene set to plot 3 dot plots
function_plot(df_global)
function_plot(df_spe)
function_plot(df_modules)

    
##### Phylogenetic two block PLS #####

#Function:
PLS_function <- function(Data,Si,Tree) {
    PLS.aux <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),apply(as.matrix(Si[[i]][,c(a,b,c,d,e,f),drop=F]),2,scale_to_variance,1),Tree[[i]])) #a,b,c,d,e and f correspond to the ecological predictors (except diet ecology vector)
    return(PLS.aux)
}

#Use this function for each gene set
PLS_global <- PLS_function(lograwCounts_20Prct,ecological_predictors_global,tree)
PLS_spe <- PLS_function(lograwCounts_spe,ecological_predictors_spe,tree_spe)
PLS_modules <- PLS_function(lograwCounts_modules,ecological_predictors_modules,tree_modules)

#Obtain right vectors from these PLS objects
right_global <- lapply(PLS_global, function(x) as.data.frame(x$right.pls.vectors[,1,drop=F]))
right_spe <- lapply(PLS_spe, function(x) as.data.frame(x$right.pls.vectors[,1,drop=F]))
right_modules <- lapply(PLS_modules, function(x) as.data.frame(x$right.pls.vectors[,1,drop=F]))

#These values can then be compared to estimate the relative importance of each predictor in driving correlations
