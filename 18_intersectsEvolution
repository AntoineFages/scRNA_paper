#!/usr/bin/env Rscript
#Script 18. R script for modelling evolution of gene expression of ecologically relevant genes

library(Seurat)
library(dplyr)
library(stats)
library(ape)
library(reshape2)
library(geomorph)
library(caper)
library(geiger)
library(nlme)
lbrary(geomorph)
library(tidyr)

##### Read input files #####

#Matrices of log(cpm) within each cell population
lograwCounts<-readRDS(paste0(path_to_output_of_integration,'logcpm_byCellType.rds'))

#List of cell populations associated with these
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells',
            'enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2',
            'T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
CellTypes <- CellTypes[-c(13,18,20,21,23,24)]

#Restrict to genes expressed in at least 10% of cells to avoid genes that are only sporadically expressed
genes_Prct_CellTypes <- readRDS(paste0(path_to_output_of_integration,'genes_PrctExpr.rds'))
genes_10Prct <- lapply(genes_Prct_CellTypes, function(x) x[x$Cell_proportion > 0.1,])
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,colnames(lograwCounts[[i]]) %in% genes_10Prct[[i]]$Markers])

##Time-calibrated species tree
tree <- readRDS(paste0(path_to_output_of_integration,'tree_byCellType.rds'))

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))

#Make sure order of ecological predictors and data match order of tree tips
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][tree[[i]]$tip.label,])
ecological_predictors <- lapply(lograwCounts, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors <- lapply(seq_along(ecological_predictors), function(i) ecological_predictors[[i]][tree[[i]]$tip.label,])

#Input ecologically relevant genes
intersects <- readRDS(aste0(path_to_output_of_integration,'enterocytes1_intersect.rds'))

#Input of results of 2B-PLS
PLS_results<-readRDS(paste0(path_to_output_of_integration,'2BPLS_results.rds'))

#Input inferred trait evolution trees for each ecological predictor
tree_d15N <- read.tree('XXX')
tree_d13C <- read.tree('XXX')
tree_gut <- read.tree('XXX')
tree_LPJ <- read.tree('XXX')
tree_OJ <- read.tree('XXX')
tree_dietEcology <- read.tree('XXX')

#Function to visualise rates of evolution on a phylogenetic tree, courtesy of Julien Clavel
plotShifts <- function(phylo, rates,...){
    #require(fields)
    #if(!attr(phylo,"order")=="cladewise") phylo = reorder.phylo(phylo, "cladewise")
    
    args <- list(...)
    # options
    if(is.null(args[["fun"]])) args$fun <- mean
    if(is.null(args[["show.tip.label"]])) args$show.tip.label <- TRUE
    if(is.null(args[["horizontal"]])) args$horizontal <- TRUE
    if(is.null(args[["color"]])) args$color <- c("blue", "red")
    if(is.null(args[["log"]])) args$log <- FALSE
    if(is.null(args[["palette"]])) args$palette <- FALSE
    if(is.null(args[["main"]])) args$main <- NULL
    if(is.null(args[["cex"]])) args$cex <- 0.5
    if(is.null(args[["width"]])) args$width <- 2
    
    
    # plot the rates?
    if(args$log==TRUE) rates <- log(rates)
    
    # colors mapping
    if(any(args$palette==FALSE)){
      #Colors = colorRampPalette(args$color)( 100 )
      #Colors = colorRampPalette(c("grey","yellow","red","red4","#2D0808"))(100)
      Colors = inferno(100)
    }else{
      Colors = args$palette
    }
    
    #change color to something different
    
    # 0 index induce error I scale it between 1 and 100
    linScale <- function(x, from, to) round( (x - min(x)) / max(x - min(x)) * (to - from) + from)
    col <- linScale(rates, from=1, to=100)
    
    #if(args$scale==TRUE){
    #  phylo$edge.length <- phylo$edge.length*rates
    #  }
    
    
    plot(phylo, edge.color = Colors[col], show.tip.label = args$show.tip.label, main = args$main, cex = args$cex, edge.width = args$width)
    
    image.plot(z = as.matrix(rates),col = Colors,
               legend.only = TRUE, horizontal = args$horizontal)
    #return(p)
    
  }

##### Plot correlations between tip values in traits and in gene sets correlating with these traits #####




