#!/usr/bin/env Rscript
#Script 15. R script for testing associations between epithelial relative abundances and ecology

library(Seurat)
library(ape)
library(phytools)
library(ggplot2)
library(geiger)
library(caper)
library(plyr)
library(pracma)
library(dplyr)
library(tidyr)

##### Read input files #####
#Custom PCA script and script to plot relative cell abundances
source('PCA_script.R') 
source('plotCellTypeProps.R')

#Read Seurat object
my.se <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final.rds'))

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))

#Count number of cells in each cell population and species
aux <- lapply(levels(my.se@meta.data$orig.ident.2), function(x) plyr::count(my.se@meta.data[my.se@meta.data$orig.ident.2==x,]$CellTypes)$freq)
count_celltypes <- do.call('rbind',aux)
rownames(count_celltypes) <- levels(my.se@meta.data$orig.ident.2) #each row corresponds to a species
colnames(count_celltypes) <- levels(my.se@meta.data$CellTypes) #each column corresponds to a cell population

##### Correlations #####
#Prepare relative abundances within the epithelium
count_epithelium <- count_celltypes[,c(1:9)] #epithelial cell populations
count_abs <- rowSums(count_epithelium[,c(1,2,3,5)]) #epithelial absorptive cell populations
count_nonabs <- rowSums(count_epithelium[,c(4,6,7,8,9)]) #epithelial non-absorptive cell populations
count_epiRatio <- count_abs/(count_abs+count_nonabs) #ratio of absoprtive cells within the epithelium
count_Ratio <- lapply(seq_along(1:9), function(i) count_epithelium[,i]/rowSums(count_epithelium)) #relative abundance of each population within the epithelium

#Add the cell population relative abundances to the ecological predictor table
ecological_predictors <- ecological_predictors[match(names(count_epiRatio),ecological_predictors$species),]
ecological_predictors$epiRatio <- count_epiRatio
ecological_predictors$ent1Ratio <- count_Ratio[[1]]
ecological_predictors$ent2Ratio <- count_Ratio[[2]]
ecological_predictors$LRERatio <- count_Ratio[[3]]
ecological_predictors$B4Ratio <- count_Ratio[[5]]
ecological_predictors$prolifRatio <- count_Ratio[[4]]
ecological_predictors$gobletRatio <- count_Ratio[[6]]
ecological_predictors$tuftRatio <- count_Ratio[[7]]
ecological_predictors$enteroRatio <- count_Ratio[[8]]
ecological_predictors$epiDCRatio <- count_Ratio[[9]]
ecological_predictors <- na.omit(ecological_predictors)

#Input time-calibrated species tree
tree<-read.tree('XXX')
exclude = tree$tip.label[! tree$tip.label %in% ecological_predictors$species]
tree = ape::drop.tip(phy=tree, tip=exclude, root.edge = F, rooted = is.rooted(tree))

#Adapt ecological predictor table
ecological_predictors <- ecological_predictors[match(tree$tip.label, ecological_predictors$species),]

#Prepare data for pGLS
caper.data <- comparative.data(phy = tree, data = ecological_predictors, names.col = species)
name_predictors <- c('d15N','d13C','oral_PC1','LPJ_PC2','normalised_gut_length','diet_ecology_vector')
number_predictors <- c(a,b,c,d,e,f) #a, b, c, d, e, and f correspond to the column numbers of the predictors in name_predictors
name_tests <- c('epiRatio','enterocytes_1','enterocytes_2','LREs','BEST4_cells','proliferating_secretory_cells','goblet_cells','tuft_cells','enteroendocrine_cells','epithelial_DCs')
number_tests <- c(g,h,i,j,k,l,m,n,o,p) #g, h, i, j, k, l, m, n, o, and p correspond to the column numbers of the relative abundances in the name_tests

#Function pGLS under Brownian Motion
function_pgls_bm <- function(Data,i,j) {
  formula <- as.formula(paste0(names(Data)[i], " ~ ", names(Data)[j]))
  mod <- summary(pgls(caper.data,formula=formula,lambda=1))
  return(mod)
}

#Function pGLS with a Pagel's lambda tree transformation
function_pgls_lambda <- function(Data,i,j) {
  formula <- as.formula(paste0(names(Data)[i], " ~ ", names(Data)[j]))
  mod1 <- try(pgls(caper.data,formula=formula,lambda='ML'))
  if (class(mod1) == "try-error") {
    return(NA)
  } else {
    mod=summary(mod1)
    return(mod)
  }
}

#Summaries for linear model, pGLS under BM and pGLS with Pagel's lambda
sum_lm <- lapply(number_tests, function(x) lapply(number_predictors, function(y) summary(lm(ecological_predictors[,x] ~ ecological_predictors[,y]))))
sum_bm <- lapply(number_tests, function(x)  lapply(number_predictors, function(y) function_pgls_bm(ecological_predictors,x,y)))
sum_lambda <- lapply(number_tests, function(x)  lapply(number_predictors, function(y) function_pgls_lambda(ecological_predictors,x,y)))


##### Summary Dot Plot #####
rsquare <- lapply(sum_lambda, function(x) unlist(lapply(x, function(y) y$r.squared)))
pval <- lapply(sum_lambda, function(x) unlist(lapply(x, function(y) y$coefficients[2,4])))
slope <- lapply(sum_lambda, function(x) unlist(lapply(x, function(y) y$coefficients[2,1])))
delta <- c(abs(max(ecological_predictors$d15N) - min(ecological_predictors$d15N)),abs(max(ecological_predictors$d13C) - min(ecological_predictors$d13C)),
          abs(max(ecological_predictors$oral_PC1) - min(ecological_predictors$oral_PC1)), abs(max(ecological_predictors$LPJ_PC2) - min(ecological_predictors$LPJ_PC2)),
          abs(max(ecological_predictors$ratio) - min(ecological_predictors$ratio)),abs(max(ecological_predictors$diet_ecology_vector) - min(ecological_predictors$diet_ecology_vector)) )

#Create dataframe with all these values
df <- data.frame(rsquare = unlist(rsquare), pval = unlist(pval), slope=unlist(slope), celltype = rep(name_tests,each=6), predictor = rep(name_predictors,10),delta = rep(delta,10))
df$logpval <- -log10(df$pval)
df$predictor <- factor(df$predictor,levels=rev(c('d15N','normalised_gut_length','LPJ_PC2','diet_ecology_vector','d13C','oral_PC1')))
df$celltype <- factor(df$celltype, levels=c('epiRatio','enterocytes_1','enterocytes_2','LREs','BEST4_cells','proliferating_secretory_cells','goblet_cells','tuft_cells','enteroendocrine_cells','epithelial_DCs'))

#Add whether correlations are statistically significant or not
df$sig <- 'none'
df[df$slope < 0 & df$pval<0.05,]$sig <- 'negative'
df[df$slope > 0 & df$pval<0.05,]$sig <- 'positive'

#Get orientation based on calculated slope
df$orientation <- rad2deg(atan(df$slope)*df$delta)
df <- df %>%
  mutate(
    x_start = as.numeric(celltype) - (rsquare/2 * cos(orientation * pi / 180)),
    x_end = as.numeric(celltype) + (rsquare/2 * cos(orientation * pi / 180)),
    y_start = as.numeric(predictor) - (rsquare/2 * sin(orientation * pi / 180)),
    y_end = as.numeric(predictor) + (rsquare/2 * sin(orientation * pi / 180))
  )

#Plot this
ggplot(df,aes(x=celltype,y=predictor,fill=logpval,size=rsquare)) + theme_classic() + geom_point() +
  scale_size_continuous(limits = c(0,0.45)) + geom_point(data=df,aes(color=sig,shape=sig,stroke=sig)) + 
  scale_shape_manual(values=c(21,21,21)) + scale_color_manual(values=c('red','grey80','red')) + scale_discrete_manual(aesthetics ='stroke',values=c(1,0.1,1)) +
  scale_fill_gradient2(low="white",mid="grey",high="black",midpoint=1.5,limits=c(0,3)) + 
  scale_x_discrete(labels=c('absorptive cells','enterocytes 1','enterocytes 2','lysosome-rich enterocytes','BEST4 cells',
                            'epithelial progenitors','goblet cells','tuft cells','enteroendocrine cells','epithelial dendritic cells')) +
  geom_segment(data=df, aes(x = x_start, y = y_start, xend = x_end, yend = y_end),linewidth=.5,color='white',arrow = arrow(length = df$rsquare*unit(0.5, "cm"))) + 
  RotatedAxis() + scale_size(range=c(0,10))





