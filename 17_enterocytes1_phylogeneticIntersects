#!/usr/bin/env Rscript
#Script 17. R script for identifying ecologically relevant genes in enterocytes 1

library(Seurat)
library(dplyr)
library(stats)
library(ape)
library(reshape2)
library(geomorph)
library(caper)
library(geiger)
library(nlme)
lbrary(geomorph)
library(tidyr)

##### Read input files #####

#Matrices of log(cpm) within each cell population
lograwCounts<-readRDS(paste0(path_to_output_of_integration,'logcpm_byCellType.rds'))

#List of cell populations associated with these
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells',
            'enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2',
            'T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
CellTypes <- CellTypes[-c(13,18,20,21,23,24)]

#Restrict to genes expressed in at least 10% of cells to avoid genes that are only sporadically expressed
genes_Prct_CellTypes <- readRDS(paste0(path_to_output_of_integration,'genes_PrctExpr.rds'))
genes_10Prct <- lapply(genes_Prct_CellTypes, function(x) x[x$Cell_proportion > 0.1,])
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,colnames(lograwCounts[[i]]) %in% genes_10Prct[[i]]$Markers])

##Time-calibrated species tree
tree <- readRDS(paste0(path_to_output_of_integration,'tree_byCellType.rds'))

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))

#Make sure order of ecological predictors and data match order of tree tips
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][tree[[i]]$tip.label,])
ecological_predictors <- lapply(lograwCounts, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors <- lapply(seq_along(ecological_predictors), function(i) ecological_predictors[[i]][tree[[i]]$tip.label,])


##### Methods 1 & 2: univariate lm and pGLS #####

#Functions to perform linear model and pGLS with Brownian Motion
#Linear model
function_lm <- function(Data,g) {
    summary(lm(Data[,1] ~ Data[,g]))$coefficients[2,4]
}

#pGLS Brownian Motion
function_gls_bm <- function(Data,Tree,g) {
    formula <- as.formula(paste0(names(Data)[1], " ~ ", names(Data)[g]))
    mod1 <- try(gls(formula,data=Data,correlation = corBrownian(value=1,phy=Tree[[n_CellType]],form = ~species),method='ML'))
    if (class(mod1) == "try-error") {
        return(NA)
    } else {
        mod=summary(mod1)
        p = mod$tTable[2,4]
        return(p)
    }
}

data_byGene <- lapply(lograwCounts, function(x) (seq_along(colnames(x)), as.data.frame(function(i) x[,i,drop=F])))

#Function to prepare data for lm and pGLS
function_prepare <- function(data,i) {
    data$d15N <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$d15N
    data$d13C <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$d13C
    data$ratio <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$ratio
    data$LPJ_PC2 <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$LPJ_PC2
    data$oral_PC1 <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$oral_PC1
    data$diet_ecology_vector <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$diet_ecology_vector
    data$species <- rownames(data)
    colnames(data) <- c('gene','d15N','d13C','ratio','LPJ_PC2','oral_PC1','diet_ecology_vector','species')
    data <- data[tree[[i]]$tip.label,]
    return(data)
}

#Use this function to get all data ready
data_final <- lapply(seq_along(data_byGene), function(i) lapply(data_byGene[[i]], function(x) function_prepare(x,i)))

#Run the lm and pGLS functions for each gene expressed in each cell population
lm_data_genes <- lapply(seq_along(data_final), function(i) lapply(data_final[[i]]), function(x) unlist(lapply(2:7, function(j) function_lm(x,j))))
gls_bm_data_genes <- lapply(seq_along(data_final), function(i) lapply(data_final[[i]]), function(x) unlist(lapply(2:7, function(j) function_gls_bm(x,tree[[i]],j))))

#The p-values can then be extracted for each gene and ecological predictor, and used to select ecologically relevant genes,
#with the threshold p-val(lm) < 0.05 and p-val(pGLS) < 0.05

#List of the 6 predictors and two methods
predictors <- c('d15N','d13C','ratio','LPJ_PC2','oral_PC1','diet_ecology_vector')
pval_methods <- c('logpval_lm','logpval_bm')

#Function to summarise all the lm and pGLS results
get_predictor <- function(list_data_genes,predictors,k,l) {
    aux <- list()
    df <- list()
    for (i in 1:length(list_data_genes)) { #there is one list for each cell population
        aux[[i]] <- list()
        for (j in 1:length(list_data_genes[[i]])) { #there is one list of results for each gene within each cell population
            aux[[i]][[j]] <- list_data_genes[[i]][[j]][[k]] #one result for each gene within each cell population and ecological predictor
        }
        aux[[i]] <- unlist(aux[[i]])
        df[[i]] <- data.frame(pval=aux[[i]],celltype=rep(CellTypes[[i]],length(aux[[i]])),predictor=rep(predictors[[k]],length(aux[[i]])))
        df[[i]]$pval <- (-log10(df[[i]]$pval))
        colnames(df[[i]])[[1]] <- pval_methods[[l]]
        df[[i]]$geneID <- colnames(lograwCounts[[match(CellTypes[[i]],CellTypes)]])
    }
    return(df)
}

#Summarise results
lm_summary_tables <- lapply(seq_along(predictors), function(i) do.call(rbind,get_predictor(lm_data_genes,predictors,i,1)))
bm_summary_tables <- lapply(seq_along(predictors), function(i) do.call(rbind,get_predictor(gls_bm_data_genes,predictors,i,2)))
univariate_summary_tables <- lapply(seq_along(lm_summary_tables), function(i) cbind(lm_summary_tables[[i]],bm_summary_tables[[i]]) #summary tables for each predictor and cell population

##### Methods 3 & 4: multivariate 2B-PLS and phylogenetic 2B-PLS #####

#Phylogenetic 2B-PLS function
PLS_function <- function(Data,Si,Tree) {
            PLS.d15N <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,a,drop=F]),Tree[[i]])) #a refers to the number of the column containing d15N values
            PLS.d13C <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,b,drop=F]),Tree[[i]])) #b refers to the number of the column containing d13C values
            PLS.ratio <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,c,drop=F]),Tree[[i]])) #c refers to the number of the column containing normalised gut length values
            PLS.LPJ_PC2 <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,d,drop=F]),Tree[[i]])) #d refers to the number of the column containing LPJ PC2 values
            PLS.oral_PC1 <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,e,drop=F]),Tree[[i]]))) #e refers to the number of the column containing oral PC1 values 
            PLS.diet_ecology_vector <- lapply(seq_along(Data), function(i) phylo.integration(as.matrix(Data[[i]]),as.matrix(Si[[i]][,f,drop=F]),Tree[[i]])) #f refers to the number of the column containing diet ecology vector values
            return(list(PLS.d15N,PLS.d13C,PLS.ratio,PLS.LPJ_PC2,PLS.oral_PC1,PLS.diet_ecology_vector))
}

#2B-PLS function
nonphyloPLS_function <- function(Data,Si) {
            PLS.d15N <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,a,drop=F]))) #a refers to the number of the column containing d15N values
            PLS.d13C <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,b,drop=F]))) #b refers to the number of the column containing d13C values
            PLS.ratio <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,c,drop=F]))) #c refers to the number of the column containing normalised gut length values
            PLS.LPJ_PC2 <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,d,drop=F]))) #d refers to the number of the column containing LPJ PC2 values
            PLS.oral_PC1 <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,e,drop=F]))) #e refers to the number of the column containing oral PC1 values 
            PLS.diet_ecology_vector <- lapply(seq_along(Data), function(i) two.b.pls(as.matrix(Data[[i]]),as.matrix(Si[[i]][,f,drop=F]))) #f refers to the number of the column containing diet ecology vector values
            return(list(PLS.d15N,PLS.d13C,PLS.ratio,PLS.LPJ_PC2,PLS.oral_PC1,PLS.diet_ecology_vector))
}

#Run these two functions and obtain gene loadings
PLS_results <- PLS_function(lograwCounts,ecological_predictors,tree)
nonphyloPLS_results <- nonphyloPLS_function(lograwCounts,ecological_predictors)

order_loading_function <- function(list_PLS) {
  lapply(list_PLS, function(x) lapply(x, function(y) y$left.pls.vectors[order(-abs(y$left.pls.vectors[,1])),,drop=FALSE]))
  }

ordered_loadings <- order_loading_function(PLS_results)
nonphyloordered_loadings <- order_loading_function(nonphyloPLS_results)

#Combine univariate and multivariate approaches
univariate_significant <- lapply(univariate_summary_tables, function(x) x[x$logpval_bm > 1.3 & x$logpval_lm > 1.3,])
univariate_significant_enterocytes1 <- lapply(univariate_significant, function(x) x[x$celltype='enterocytes 1',])
intersects <- lapply(1:6, function(i) intersect(rownames(ordered_loadings[[i]][[1]])[1:nrow(univariate_significant_enterocytes1[[i]])], univariate_significant_enterocytes1[[i]]$geneID))
intersects_double <- lapply(1:6, function(i) intersect(rownames(nonphyloordered_loadings[[i]][[1]])[1:nrow(univariate_significant_enterocytes1[[i]])], intersects[[i]]))

#Save these gene sets representing for each ecological predictor the intersection of the four approaches
saveRDS(intersects_double,paste0(path_to_output_of_integration,'enterocytes1_intersect.rds'))


##### Characterisation of ecologically relevant genes #####

#Infer rates of gene expression evolution for each gene expressed in enterocytes 1
lograwCounts_enterocytes1 <- lograwCounts[[1]]
data_fitContinuous <- lapply(seq_along(colnames(lograwCounts_enterocytes1)), function(i) lograwCounts_enterocytes1[,i,drop=F])
for (i in 1:length(data_fitContinuous)){
    colnames(data_fitContinuous[[i]]) <- c('geneID')
    data_fitContinuous[[i]] <- data_genes[[i]][tree[[1]]$tip.label,,drop=F]
 }

#Run fitContinuous to model a Brownian Motion
fit_BM <- lapply(data_fitContinuous, function(x) fitContinuous(dat=x,phy=tree[[1]],SE=0,model='BM',ncores=10))

#Obtain rate of evolution
rates <- unlist(lapply(fit_BM, function(x) x$opt$sigsq))
gene_names <- lapply(genes_10Prct[1]], function(x) (x$Markers))
df_rates <- data.frame(geneID=gene_names, rate=rates)

#Input Tissue specificity
Tau <- readRDS(paste0(path_to_output_of_transcriptome_characterisation,'Tau.rds'))

#Input gsi (Gene Specificity Index)
gsi <- readRDS(paste0(path_to_output_of_integration,'gsi_byCellType.rds'))

#Summarise these three parameters in one table
function_information <- function(genes,name_of_predictor) {
            Tau_aux <- Tau[match(genes,Tau$geneID),]$TissueSpe
            gsi_aux <- gsi[match(genes,rownames(gsi)),]
            rate_aux <- df_rates[match(genes,df_rates$geneID),]$rate
            df_aux <- data.frame(Tau=Tau_aux,gsi=gsi_aux,rate=rate_aux,type=rep(name_of_predictor,length(Tau_aux)))
            return(df_aux)
}

#This function can then be used to characterise the Tissue Specificy, Gene Specificity Index and Rate of Gene Expression Evolution of any get set, 
#including ecologically relevant genes and the set of all genes expressed in enterocytes 1


##### Gene Ontology Enrichment Analysis #####

go.names<-read.csv('XXX') #table of GO terms and descriptions, retrieved from AnnotationHub
gene.go<-read.csv('XXX') #table of correspondence between genes and GO terms, retrieved from AnnotationHub
geneName<-read.csv(file='XXX') #annotation linking geneID and gene name, derived from gtf annotation file
go.names<-go.names[go.names$GOID %in% gene.go$GOALL,]

#Function to perform GO enrichment analysis of any set of genes compared to a universe
go_function <- function(genes_DE,all_genes,celltype,pred){
  aux <- limma::kegga(genes_DE, gene.pathway=gene.go,pathway.names=go.names, universe = unique(gene.go[gene.go$GID %in% all_genes,]$GID))
  aux <- aux[aux$P.DE<0.05,]
  aux <- aux[order(aux$P.DE),]
  if (nrow(aux) > 0) {
  aux$celltype <- celltype
  aux$pred <- pred
  aux$GID <- rownames(aux)
  }
  return(aux)
}

#Use the function to find GO terms enriched
go_ent1 <- lapply(seq(1:6), function(i)  go_function(intersect_double[[i]],colnames(lograwCounts_enterocytes1),'enterocytes 1',predictors[[i]]))
for(i in 1:length(go_ent1)) { go_ent1[[i]]$pred <- predictors[[i]]}
go_ent1 <- lapply(go_ent1, function(x) x[x$N>5,])
go_ent1_all <- do.call('rbind',go_ent1)

#Save output for REVIGO visualisation
write.table(go_ent1_all,'XXX')


