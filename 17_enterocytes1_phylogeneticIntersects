#!/usr/bin/env Rscript
#Script 17. R script for identifying ecologically relevant genes in enterocytes 1

library(Seurat)
library(dplyr)
library(stats)
library(ape)
library(reshape2)
library(geomorph)
library(caper)
library(geiger)
library(nlme)

##### Read input files #####

#Matrices of log(cpm) within each cell population
lograwCounts<-readRDS(paste0(path_to_output_of_integration,'logcpm_byCellType.rds'))

#List of cell populations associated with these

CellTypes <- CellTypes[-c(13,18,20,21,23,24)]

#Restrict to genes expressed in at least 10% of cells to avoid genes that are only sporadically expressed
genes_Prct_CellTypes <- readRDS(paste0(path_to_output_of_integration,'genes_PrctExpr.rds'))
genes_10Prct <- lapply(genes_Prct_CellTypes, function(x) x[x$Cell_proportion > 0.1,])
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][,colnames(lograwCounts[[i]]) %in% genes_10Prct[[i]]$Markers])

##Time-calibrated species tree
tree <- readRDS(paste0(path_to_output_of_integration,'tree_byCellType.rds'))

#Ecological predictors
ecological_predictors <- readRDS(paste0(path_to_output_of_integration,'ecological_predictors.rds'))

#Make sure order of ecological predictors and data match order of tree tips
lograwCounts <- lapply(seq_along(lograwCounts), function(i) lograwCounts[[i]][tree[[i]]$tip.label,])
ecological_predictors <- lapply(lograwCounts, function(x) ecological_predictors[ecological_predictors$species %in% colnames(x),])
ecological_predictors <- lapply(seq_along(ecological_predictors), function(i) ecological_predictors[[i]][tree[[i]]$tip.label,])


##### Methods 1 & 2: univariate lm and pGLS #####

#Functions to perform linear model and pGLS with Brownian Motion
#Linear model
function_lm <- function(Data,g) {
    summary(lm(Data[,1] ~ Data[,g]))$coefficients[2,4]
}

#pGLS Brownian Motion
function_gls_bm <- function(Data,Tree,g) {
    formula <- as.formula(paste0(names(Data)[1], " ~ ", names(Data)[g]))
    mod1 <- try(gls(formula,data=Data,correlation = corBrownian(value=1,phy=Tree[[n_CellType]],form = ~species),method='ML'))
    if (class(mod1) == "try-error") {
        return(NA)
    } else {
        mod=summary(mod1)
        p = mod$tTable[2,4]
        return(p)
    }
}

data_byGene <- lapply(lograwCounts, function(x) (seq_along(colnames(x)), as.data.frame(function(i) x[,i,drop=F])))

#Function to prepare data for lm and pGLS
function_prepare <- function(data,i) {
    data$d15N <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$d15N
    data$d13C <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$d13C
    data$ratio <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$ratio
    data$LPJ_PC2 <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$LPJ_PC2
    data$oral_PC1 <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$oral_PC1
    data$diet_ecology_vector <- ecological_predictors[[i]][match(rownames(data),rownames(ecological_predictors[[i]]),]$diet_ecology_vector
    data$species <- rownames(data)
    colnames(data) <- c('gene','d15N','d13C','ratio','LPJ_PC2','oral_PC1','diet_ecology_vector','species')
    data <- data[tree[[i]]$tip.label,]
    return(data)
}

#Use this function to get all data ready
data_final <- lapply(seq_along(data_byGene), function(i) lapply(data_byGene[[i]], function(x) function_prepare(x,i)))

#Run the lm and pGLS functions for each gene expressed in each cell population
lm_data_genes <- lapply(seq_along(data_final), function(i) lapply(data_final[[i]]), function(x) unlist(lapply(2:7, function(j) function_lm(x,j))))
gls_bm_data_genes <- lapply(seq_along(data_final), function(i) lapply(data_final[[i]]), function(x) unlist(lapply(2:7, function(j) function_gls_bm(x,tree[[i]],j))))

#The p-values can then be extracted for each gene and ecological predictor, and used to select ecologically relevant genes,
#with the threshold p-val(lm) < 0.05 and p-val(pGLS) < 0.05

get_predictor <- function(list_data_genes,predictors,k,l) {
    aux <- list()
    df <- list()
    for (i in 1:length(list_data_genes)) { #there is one list for each cell population
        aux[[i]] <- list()
        for (j in 1:length(list_data_genes[[i]])) { #there is one list of results for each gene within each cell population
            aux[[i]][[j]] <- list_data_genes[[i]][[j]][[k]] #one result for each gene within each cell population and ecological predictor
        }
        aux[[i]] <- unlist(aux[[i]])
        df[[i]] <- data.frame(pval=aux[[i]],celltype=rep(celltype[[i]],length(aux[[i]])),predictor=rep(predictors[[k]],length(aux[[i]])))
        if (l !=4) {
#     df[[i]]$pval <- (-log10(df[[i]]$pval))
#     }
#     colnames(df[[i]])[[1]] <- pval_methods[[l]]
#     df[[i]]$geneID <- colnames(lograwCounts[[match(celltype[[i]],CellTypes)]])
#     df[[i]] <- df[[i]][df[[i]]$geneID %in% genes_10Prct[[match(celltype[[i]],CellTypes)]]$Markers,]
#   }
#   return(df)
# }



##### Methods 3 & 4: multivariate 2B-PLS and phylogenetic 2B-PLS #####






