#!/usr/bin/env Rscript
#Script 10. R script for running scWGCNA

library(Seurat)
library(WGCNA)
library(scWGCNA)
library(pheatmap)
library(tidyr)

#Read Seurat object
my.se <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final.rds'))

##### scWGCNA #####
DefaultAssay(my.se)<-"RNA"

#Get pseudocells
my.se <- RunPCA(my.se,npcs=100)
my.se.pcells <- calculate.pseudocells(s.cells = my.se, seeds=0.2,nn=100,reduction="pca",dims=1:100)

saveRDS(my.se.pcells, file= paste0(PATH,'pcells_AdultGut_',format(Sys.Date(), "%d%m%y"),'.rds'))

var.feat <- VariableFeatures(my.se)

#Run scWGCNA
my.se.scWGCNA <-  run.scWGCNA(p.cells = my.se.pcells,s.cells = my.se, is.pseudocell = T,features = var.feat)

#Average expression
module_expression <- scW.p.expression(s.cells=my.se,scWGCNA.data=my.se.scWGCNA,modules="all",reduction="umap",ncol=6)

#Create networks
my.se.scWGCNA <- scWGCNA.networks(scWGCNA.data = my.se.scWGCNA)


##### Heatmap of module pseudobulk average expression #####
#Get dynamic colors
my.dc <- my.se.scWGCNA$dynamicCols
  
#Module Gene Correlation
my.datExpr <- data.frame(my.se@assays$RNA@data)
my.MEs <- moduleEigengenes(t(my.datExpr[names(my.dc),]), colors = my.dc)

#Make the mean per cell clusters
my.modavg <- aggregate(my.MEs$averageExpr, list(my.se@meta.data$CellTypes), mean)
rownames(my.modavg) <- my.modavg$Group.1
my.wgmat <- my.modavg

#Get rid of the extra column
my.wgmat <- data.frame(my.wgmat[,-1])

#Restore the rownames
rownames(my.wgmat) <- rownames(my.modavg)

#Prepare for heatmap
my.colcols = as.matrix(names(table(my.se.scWGCNA$dynamicCols)))
avg.mod.eigengenes <- my.se.scWGCNA$sc.MEList$averageExpr
annot_name <- data.frame(row.names= my.colcols[,1], "Modules" = my.colcols[,1])
colors_modules <- my.colcols[,1]
names(colors_modules) <- colors_modules
annot_col <- list(CellTypes=colours_CellTypes,Modules=colors_modules)
colnames(my.wgmat) <- my.colcols[,1]

#Plot heatmap of module pseudobulk average expression
pheatmap(as.matrix(my.wgmat),
                  col = colorRampPalette(c("dodgerblue4","dodgerblue", "white", "red", "darkred"))(n = 1000),
                  trace="none",
                  scale = "row",
                  margins = c(10,10),
                  ColSideColors = my.colcols,border_color=NA,
                  annotation_row = annot_name,annotation_col=annot_name,annotation_colors = annot_col)


##### GO enrichment analysis #####
#GO input
go.names<-read.csv('XXX') #table of GO terms and descriptions, retrieved from AnnotationHub
gene.go<-read.csv('XXX') #table of correspondence between genes and GO terms, retrieved from AnnotationHub

geneName<-read.csv(file='XXX') #annotation linking geneID and gene name, derived from gtf annotation file

#Restrict to genes expressed in my.se 
gene.go<-gene.go[gene.go$GID %in% geneName[match(rownames(my.se),geneName$gff_annotation),]$geneID,]
go.names<-go.names[go.names$GOID %in% gene.go$GOALL,]

#Compute GO for each module
compute_go <- function(i) {
        dewg <- my.se.scWGCNA$module.genes[[i]]
        dewg <- dewg[dewg %in% geneName$gff_annotation]
        dewg <- geneName[match(dewg,geneName$gff_annotation),][,1]
        gowg <- limma::kegga(dewg, gene.pathway=gene.go, pathway.names=go.names,universe = unique(gene.go$GID))
        gowg <- gowg[order(gowg$P.DE),]
        gowg <- gowg[gowg$P.DE<0.05,]
        gowg$P.DE <- p.adjust(gowg$P.DE,method="BH")
        return(gowg)
}

gowg <- lapply(seq_along(names(my.se.scWGCNA$modules)), function(i)  compute_go(i))

#Combine all GO terms - retain only top 5
g.plot = data.frame()
topterms = data.frame()

for (i in seq(length(goterms))){
        topterms=goterms[[i]][1:5,]
        topterms$cluster = i
        g.plot = rbind(g.plot,topterms)
}

g.plot$cluster = as.factor(g.plot$cluster)
g.plot$Pathway = droplevels(g.plot$Pathway)
my.terms = nchar(levels(g.plot$Pathway))>45     
my.gterms = strtrim(levels(g.plot$Pathway), 45)
my.gterms[my.terms] = paste0(my.gterms[my.terms],"...")
levels(g.plot$Pathway) = my.gterms
g.plot<-na.omit(g.plot)

#Export then save output for REVIGO visualisation
g.plot$GOterm <- rownames(g.plot)
GO.table.scWGCNA <- g.plot[,c(6,4,5)]
rownames(GO.table.scWGCNA) <- NULL
write.table(GO.table.scWGCNA,'GO.table.scWGCNA.csv',quote=F,row.names = F,sep='\t')

