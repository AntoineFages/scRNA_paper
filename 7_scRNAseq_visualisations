#!/usr/bin/env Rscript
#Script 7. R script for basic visualisations of scRNAseq integrated dataset

library(Seurat)
library(BayesPrism)
library(ggplot2)
library(viridis)
library(MetaNeighbor)
library(scibet)
library(dplyr)
library(DESeq2)
library(scuttle)

##### Read input files #####
#Custom PCA script and script to plot relative cell abundances
source('PCA_script.R') 
source('plotCellTypeProps.R')

#Read Seurat object
my.se <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final.rds'))

#Define cell population colours
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells','enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2','T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
colours_CellTypes<-c("#FF7F00","#FE9F38","#FDBF6F","#FED47D","#1F78B4","#5299C6","#84B9D7","#A6CEE3","#B8C0DD","#CAB2D6", "#B295C7","#9A78B8","#6A3D9A","#D6EE91","#CAE98F","#BEE48C","#B2DF8A","#A0D67C","#33A02C","#33A04C","#E31A1C","#FB9A99","#F18499","grey20")
Idents(my.se) <- factor(Idents(my.se),levels=CellTypes)
my.se$CellTypes <- Idents(my.se)
names(colours_CellTypes) <- CellTypes

#Define taxonomic tribe colours
colours_tribe<-c("#59595C","#F04D29","#9AB9D9","#682E7A","#166533","#C588BB","#535CA9","#845F25","#FBAC43","#FDDF13","#959170","#242626","#AE262A","#86C773")
names_colours_tribe<-c("boule","cypri","ectod","eretm","haplo","lampr","limno","oreoc","peris","cypho","trema","bathy","bentho","troph")
names(colours_tribe)<-names_colours_tribe

#Species in dataset
species_included<-unique(my.se@meta.data$orig.ident.2)

##### Basic visualisations #####
#Basic metrics
DimPlot(my.se,label=F) +  scale_color_manual(values=colours_CellTypes))
VlnPlot(my.se,features=c('percent.mt'),pt.size = 0) + NoLegend() + stat_summary(fun.y=median,geom='point',size=5,colour="white",shape=95) + scale_fill_manual(values=colours_CellTypes) + ggtitle('fraction of mitochondrial reads (%)') + xlab('')
VlnPlot(my.se,features=c('nCount_RNA'),pt.size = 0) + NoLegend() + stat_summary(fun.y=median,geom='point',size=5,colour="white",shape=95) + scale_fill_manual(values=colours_CellTypes)+ ggtitle('total number of counts')+ xlab('')+ coord_cartesian(ylim=c(0,30000))
VlnPlot(my.se,features=c('nFeature_RNA'),pt.size = 0) + NoLegend() + stat_summary(fun.y=median,geom='point',size=5,colour="white",shape=95) + scale_fill_manual(values=colours_CellTypes) + ggtitle('number of detected genes') + xlab('')+ coord_cartesian(ylim=c(0,8000))

plot.abundance <- plotCellTypeProps(clusters=my.se$CellTypes,sample=my.se$orig.ident.2)
plot.abundance + theme_classic() + theme(axis.text.x = element_text(angle = 45))+ ggtitle("cell type distribution per species") + scale_fill_manual(values=colours_CellTypes)

#Marker genes DotPlot
mrk<-c("epcam","LOC100706176","fabp2","LOC100704253","LOC100703770","LOC109195983", "cubn","best4",
      "cftr","myb","LOC100697624","LOC102078463","LOC102082568","pou2f3","lrmp","scg3","neurod1",
      "LOC102081683","LOC109202766","LOC100694706","LOC100693084","LOC102078117", "prdm1","epx",
      "LOC100707205","LOC100703242","LOC100704742","LOC100699713","LOC109204854","gata3","cd79a",
      "plk2","LOC106096470","LOC102080222","LOC100704059","anxa1","LOC100694532","lyve1","cenpe")

mrk_names<-c("epcam","amcase-1","fabp2","tmigd1","amcase-2","cathepsin L1","cubn","best4",
            "cftr","myb","mex3a","guanylin","muc2a","pou2f3","lrmp","scg3","neurod1",
            "cr1","mcp1b","ppt2","c1qb","c1qc","prdm1","epx",
            "ffar2","bcl11bb","ccl3","ccl20","ccl10","gata3","cd79a",
            "plk2","IgM Î¼ heavy chain-like","hbab","hbba","anxa1","col1a1","lyve1","cenpe") 

xlabs <- c('enterocytes 1','enterocytes 2','lysosome-rich enterocytes','BEST4 cells','proliferating secretory cells',
          'goblet cells','Tuft cells','enteroendocrine cells','epithelial dendritic cells','dendritic cells',
          'macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2','T cells 3','T cells 4','T cells 5',
          'B cells 1','B cells 2','red blood cells','mesenchymal cells','endothelial cells','cycling cells')

rev_levels<-rev(levels(my.se))
levels(my.se)<-rev_levels
DotPlot(my.se,features=rev(mrk)) + RotatedAxis() + scale_x_discrete(labels=rev(mrk_names)) + 
  scale_color_gradient(low='white',high='black') + coord_flip() + scale_y_discrete(labels=xlabs)
levels(my.se)<-rev(levels(my.se))

#Anterior-posterior markers
genes_Lickwar <- read.csv('XXX') #path to text file containing genes used in Lickwar et al. 2017, https://doi.org/10.1371/journal.pbio.2002054
epithelium <- subset(my.se,idents=CellTypes[1:9])
levels(epithelium) <- rev(levels(epithelium))
DotPlot(epithelium,features=genes_Lickwar$gff_annotation) + scale_color_gradient(low='white',high='black') + RotatedAxis() + xlab('') + ylab('')

#Pairwise correlations between cell populations
sc.counts.matrix=round(GetAssayData(object = my.se, slot = "data"))
sc.counts.matrix<-as.matrix(sc.counts.matrix)
individual.labels=my.se$orig.ident.2
cell.type.labels=unlist(my.se$CellTypes)
sample.ids <- colnames(sc.counts.matrix)
sc.counts.matrix<-t(sc.counts.matrix)
sc.dat<-t(sc.counts.matrix)
my_palette <- colorRampPalette(c('#F0FFFF','#005656'))
plot.cor.phi(input=sc.dat, input.labels=cell.type.labels, title="cell type correlation",cexRow=0.5, cexCol=0.5,my_palette = my_palette) #plot pairwise correlations

#MetaNeighbor quality check
MetaNeighbor_function <- function(my.se) {
  sce <- as.SingleCellExperiment(my.se) #Convert into SingleCellExperiment object
  M <- colData(sce)[,20,drop=F] #cell population column of metadata
  M$CellTypes <- factor(M$CellTypes)
  CT <- table(rep(1:nrow(M),1),unlist(M))
  rownames(CT) <- colnames(sce)
  M2 <- model.matrix(~sce$CellTypes - 1)
  colnames(M2) <- levels(as.factor(sce$CellTypes))
  rownames(M2) <- colnames(sce)
  CT <- M2
  var_genes <- variableGenes(dat = sce, exp_labels = sce$orig.ident.2) #exploratory analysis
  celltype_NV <- MetaNeighborUS(var_genes = var_genes,dat = sce,study_id = sce$orig.ident.2,cell_type = sce$CellTypes,fast_version = TRUE)
  top_hits <- topHits(cell_NV = celltype_NV,dat = sce,study_id = sce$orig.ident.2,cell_type = sce$CellTypes,threshold = 0.8)
  return(top_hits)
}
MetaHits <- MetaNeighbor_function(my.se)

#Scibet confusion heatmap
expr <- t(as.data.frame(my.se@assays$RNA@data))
expr <- as.data.frame(expr)
expr$label<-my.se@meta.data$CellTypes
tibble(ID = 1:nrow(expr),label = expr$label) %>%
  dplyr::sample_frac(0.7) %>%
  dplyr::pull(ID) -> ID
train_set <- expr[ID,]      #construct reference set
test_set <- expr[-ID,]      #construct query set
prd <- SciBet(train_set, test_set[,-ncol(test_set)])
conf<-Confusion_heatmap(test_set$label, prd)
conf$data$prd <- factor(conf$data$prd,levels=rev(CellTypes))
conf

##### Data pseudobulk normalisation for PCA #####
#Function pseudobulk and normalisation with DESEq2
function_pseudobulk_normalisation <- function(my.se,minNcells) {
  Idents(my.se)<-my.se$CellTypes

  #Extract raw counts and metadata to create SingleCellExperiment object
  counts_all< - GetAssayData(object = my.se, assay="RNA",slot = "data")

  #Set up metadata as desired for aggregation and DE analysis
  meta.data_all<-my.se@meta.data
  meta.data_all$orig.ident.2<-factor(my.se$orig.ident.2)

  #Create single cell experiment object
  sce_all <- SingleCellExperiment(assays=list(counts=counts_all),colData=meta.data_all)

  #Named vector of cluster names
  kids <- purrr::set_names(CellTypes)

  #Named vector of sample names
  sids <- purrr::set_names(species_included)

  #Turn named vector into a numeric vector of number of cells per sample
  n_cells <- as.numeric(table(meta.data_all$orig.ident.2))

  #Determine how to reoder the samples (rows) of the metadata to match the order of sample names in sids vector
  m <- match(sids, meta.data_all$orig.ident.2)

  #Create the sample level metadata by combining the reordered metadata with the number of cells corresponding to each sample.
  ei <- data.frame(meta.data_all[m, ], n_cells, row.names = NULL)

  #Subset metadata to only include the cluster and sample IDs to aggregate across
  groups_all <- meta.data_all[,c("CellTypes","orig.ident.2")]

  #Not every cluster is present in all samples; create a vector that represents how to split samples
  splitf <- sapply(stringr::str_split(rownames(pb_all), pattern = "_", n = 2), `[`, 1)

  #Turn into a list and split the list into components for each cluster and transform, so rows are genes and columns are samples and make rownames as the sample IDs
  pb_all <- split.data.frame(pb_all, factor(splitf)) %>% lapply(function(u) set_colnames(t(u),stringr::str_extract(rownames(u), "(?<=_)[:alnum:]+")))

  #Prepare dataframe for plotting
  get_sample_ids <- function(x){
    pb_all[[x]] %>% colnames()
  }
  de_samples <- purrr::map(1:length(kids), get_sample_ids) %>% unlist()

  #Get cluster IDs for each of the samples
  samples_list <- purrr::map(1:length(kids), get_sample_ids)
  get_cluster_ids <- function(x){
    rep(names(pb_all)[x],each = length(samples_list[[x]]))
  }
  de_cluster_ids <- purrr::map(1:length(kids), get_cluster_ids) %>%  unlist()

  #Create a data frame with the sample IDs, cluster IDs and condition
  gg_df <- data.frame(CellTypes = de_cluster_ids, orig.ident.2 = de_samples)
  gg_df <- left_join(gg_df, ei[, c("orig.ident.2","tribe")])
  metadata <- gg_df #%>% dplyr::select(CellTypes,orig.ident.2,tribe)

  #Generate vector of cluster IDs
  metadata$CellTypes <- factor(metadata$CellTypes,levels=unique(CellTypes))
  clusters <- levels(metadata$CellTypes)
  groups_all <- colData(sce_all)[,c("CellTypes","orig.ident.2")]

  #Aggregate across cluster-sample groups
  pb_all <- aggregate.Matrix(t(counts_all), groupings = groups_all, fun = "mean")

  #Keep genes expressed in at least 2 cells in all species
  genes_ToKeep <- readRDS('XXX') #list of genes expressed in at least 2 cells in all species
  pb_all <- pb_all[rownames(pb_all) %in% genes_ToKeep,]
  pb_all <- as.matrix(t(pb_all))

  metadata$combi <- paste0(metadata$CellTypes,"_",metadata$orig.ident.2)

  #Subset samples if fewer than minNcells
  for (k in 1:length(CellTypes)){
    aux <- my.se@meta.data[my.se@meta.data$CellTypes==CellTypes[[k]],]
    for (j in 1:length(unique(aux$orig.ident.2))){
      if (plyr::count(aux$orig.ident.2)$freq[[j]] < minNcells){
        aux2 <- paste0(CellTypes[[k]],"_",plyr::count(aux$orig.ident.2)$x[[j]])
        pb_all <- pb_all[,which(colnames(pb_all)!=aux2)]
        metadata <- metadata2[metadata$combi %in% colnames(pb_all),]
      }
    }
  }

  #Normalisation with DESeq2
  dds_counts_all <- DESeqDataSetFromMatrix(round(pb_all), colData = metadata, design = ~ tribe)
  dds_all<-estimateSizeFactors(dds_counts_all)
  return(list(dds_all,metadata))
}

#Get normalised matrix of pseudobulks
dds <- function_pseudobulk_normalisation(my.se,20)[[1]]
metadata <- function_pseudobulk_normalisation(my.se,20)[[2]]


##### pseudobulk PCA #####
pca_function <- function(dds,metadata) {
  vst <- varianceStabilizingTransformation(dds)

  #Create tribes and colours
  colours_tribe<-c("#59595C","#F04D29","#9AB9D9","#682E7A","#166533","#C588BB","#535CA9","#845F25","#FBAC43","#FDDF13","#959170","#242626","#AE262A","#86C773")
  names_colours_tribe<-c("boule","cypri","ectod","eretm","haplo","lampr","limno","oreoc","peris","cypho","trema","bathy","bentho","troph")
  names(colours_tribe)<-names_colours_tribe

  pcaData12all<-plotPCA.12(vst,intgroup=c("tribe"),returnData=TRUE)
  pcaData13all<-plotPCA.13(vst,intgroup=c("tribe"),returnData=TRUE)
  pcaData14all<-plotPCA.14(vst,intgroup=c("tribe"),returnData=TRUE)

  percentVar12all<-round(100*attr(pcaData12all,"percentVar"))
  percentVar13all<-round(100*attr(pcaData13all,"percentVar"))
  percentVar14all<-round(100*attr(pcaData14all,"percentVar"))

  pcaData12all$CellTypes<-factor(metadata$CellTypes,levels=CellTypes)
  pcaData13all$CellTypes<-factor(metadata$CellTypes,levels=CellTypes)
  pcaData14all$CellTypes<-factor(metadata$CellTypes,levels=CellTypes)

  pcaData12all$tribe<-metadata$tribe
  pcaData13all$tribe<-metadata$tribe
  pcaData14all$tribe<-metadata$tribe

  print(ggplot(pcaData12all,aes(PC1,PC2))+geom_point(size=3,aes(shape=tribe,color=CellTypes)) + scale_color_manual(values=colours_CellTypes) + 
  scale_shape_manual(values=seq(0,13)) + xlab(paste0("PC1: ",percentVar12all[1],"% variance")) + ylab(paste0("PC2: ",percentVar12all[2],"% variance")) + 
  coord_fixed() +  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")))

  print(ggplot(pcaData13all,aes(PC1,PC3))+geom_point(size=3,aes(shape=tribe,color=CellTypes)) + scale_color_manual(values=colours_CellTypes) + 
  scale_shape_manual(values=seq(0,13)) + xlab(paste0("PC1: ",percentVar13all[1],"% variance")) + ylab(paste0("PC3: ",percentVar13all[3],"% variance")) + 
  coord_fixed() +  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")))

  print(ggplot(pcaData14all,aes(PC1,PC4))+geom_point(size=3,aes(shape= tribe,color=CellTypes)) + scale_color_manual(values=colours_CellTypes) + 
  scale_shape_manual(values=seq(0,13)) + xlab(paste0("PC1: ",percentVar14all[1],"% variance")) + ylab(paste0("PC4: ",percentVar14all[4],"% variance")) + 
  coord_fixed() +  theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")))

}

pca_function(dds, metadata)


##### Gene Specificity Index (gsi) #####
#Compute gsi
mat_species <- lapply(seq_along(species_included), function(i) NormalisedCount[,grep(species_included[[i]],colnames(NormalisedCount))])
mat_species <- lapply(mat_species, function(x) scale(x, center = FALSE, scale = colSums(x)))
gsi_species <- lapply(mat_species, function(x) x/rowMeans(x))
gsi <- na.omit(do.call('cbind',gsi_species))

#Prepare for heatmap
cols <- colnames(gsi)
str_cols <- stringr::str_match(cols, '(.*)_(.*)')[, -1]
colnames(str_cols) <- c('CellType','Species')
rownames(str_cols) <- cols
str_cols <- as.data.frame(str_cols)
tribe_species <- coldata[match(species_included,coldata$species),]$tribe
colours_species <- colours_tribe[tribe_species]
names(colours_species) <- species_included
ColorCode <- list(CellType=colours_CellTypes,Species=colours_species)

#Calculate Spearman pairwise correlations
sampleCorr <- cor(gsi,gsi,method = 'spearman')
sampleCorrMatrix <- as.matrix(sampleCorr)

#Plot
pheatmap(sampleCorrMatrix,annotation_col=str_cols,annotation_colors=ColorCode,color = viridis(1000),main='gsi') #plot Spearman paiwirse correlations based on gsi







