#!/usr/bin/env Rscript
#Script 11. R script for calculating interspecific gene expression divergence

library(Seurat)
library(BayesPrism)
library(ggplot2)
library(viridis)
library(MetaNeighbor)
library(scibet)
library(dplyr)
library(DESeq2)
library(scuttle)

##### Read input files #####
#Read Seurat object
my.se <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final.rds'))

#Define cell population colours
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells','enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2','T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
colours_CellTypes<-c("#FF7F00","#FE9F38","#FDBF6F","#FED47D","#1F78B4","#5299C6","#84B9D7","#A6CEE3","#B8C0DD","#CAB2D6", "#B295C7","#9A78B8","#6A3D9A","#D6EE91","#CAE98F","#BEE48C","#B2DF8A","#A0D67C","#33A02C","#33A04C","#E31A1C","#FB9A99","#F18499","grey20")
Idents(my.se) <- factor(Idents(my.se),levels=CellTypes)
my.se$CellTypes <- Idents(my.se)
names(colours_CellTypes) <- CellTypes

#Species in dataset
species_included<-unique(my.se@meta.data$orig.ident.2)

my.se.20 <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final_20CellsMaxPerPseudo.rds')) #Seurat object downsampled to 20 cells exactly per cell population and species

##### Data pseudobulk cpm normalisation #####
#Function pseudobulk cpm normalisation 
function_cpm_pseudobulk <- function(my.se,minNcells) {
  Idents(my.se)<-my.se$CellTypes

  #Extract raw counts and metadata to create SingleCellExperiment object
  counts_all< - GetAssayData(object = my.se, assay="RNA",slot = "counts")

  #Set up metadata as desired for aggregation and DE analysis
  meta.data_all<-my.se@meta.data
  meta.data_all$orig.ident.2<-factor(my.se$orig.ident.2)

  #Create single cell experiment object
  sce_all <- SingleCellExperiment(assays=list(counts=counts_all),colData=meta.data_all)

  groups_all <- colData(sce_all)[,c("CellTypes","orig.ident.2")]
  groups_all_byCellType <- meta.data_all[,c("CellTypes")]

  #Aggregate across cluster-sample groups (pb_all) 
  pb_all <- aggregate.Matrix(t(counts_all), groupings = groups_all, fun = "sum")

  #Keep genes expressed in at least 2 cells in all species
  genes_ToKeep <- readRDS('XXX') #list of genes expressed in at least 2 cells in all species
  pb_all <- pb_all[rownames(pb_all) %in% genes_ToKeep,]
  pb_all <- as.matrix(t(pb_all))

  #Calculate Counts Per Million (cpm)
  pb_all <- calculateCPM(pb_all,size.factors=NULL)

  metadata$combi <- paste0(metadata$CellTypes,"_",metadata$orig.ident.2)

  #Subset samples if fewer than minNcells
  for (k in 1:length(CellTypes)){
    aux <- my.se@meta.data[my.se@meta.data$CellTypes==CellTypes[[k]],]
    for (j in 1:length(unique(aux$orig.ident.2))){
      if (plyr::count(aux$orig.ident.2)$freq[[j]] < minNcells){
        aux2 <- paste0(CellTypes[[k]],"_",plyr::count(aux$orig.ident.2)$x[[j]])
        pb_all <- pb_all[,which(colnames(pb_all)!=aux2)]
        metadata <- metadata[metadata$combi %in% colnames(pb_all),]
      }
    }
  }

#NORMCOUNTS ANALYSES
  normCounts_by_CellType <- lapply(seq_along(CellTypes), function(i) normCounts[,grep(CellTypes[[i]],colnames(normCounts))])
  sampleCorr_by_CellType <- lapply(seq_along(normCounts_by_CellType), function(i) as.matrix(cor(normCounts_by_CellType[[i]],normCounts_by_CellType[[i]],method = 'spearman')))
  for (g in 1:length(sampleCorr_by_CellType)){
    colnames(sampleCorr_by_CellType[[g]]) <- sub(".*_", "", colnames(sampleCorr_by_CellType[[g]]))
    rownames(sampleCorr_by_CellType[[g]]) <- sub(".*_", "", rownames(sampleCorr_by_CellType[[g]]))
  }
  sampleCorr_by_CellType <- lapply(seq_along(normCounts_by_CellType), function(i) melt(sampleCorr_by_CellType[[i]]))
  for (g in 1:length(sampleCorr_by_CellType)){
    sampleCorr_by_CellType[[g]]$CellType <- CellTypes[[g]]
    sampleCorr_by_CellType[[g]]$Pair <- paste0(sampleCorr_by_CellType[[g]]$Var1,'_',sampleCorr_by_CellType[[g]]$Var2)
  }

  tree = read.tree("/scicore/home/salzburg/fages0000/scRNA/Seurat/scripts/integration/b1.tre")
  Dist.mat.sp <- melt(cophenetic(tree)/2)
  Dist.mat.sp$Pair <- paste0(Dist.mat.sp$Var1,'_',Dist.mat.sp$Var2)
  for (g in 1:length(sampleCorr_by_CellType)){
    sampleCorr_by_CellType[[g]]$dist <- Dist.mat.sp[match(sampleCorr_by_CellType[[g]]$Pair,Dist.mat.sp$Pair),]$value
    sampleCorr_by_CellType[[g]]$rate <- (1-sampleCorr_by_CellType[[g]]$value) / sampleCorr_by_CellType[[g]]$dist
  }
  normCounts_by_CellType[[10]] <- normCounts_by_CellType[[10]][,-c(grep(CellTypes[[9]],colnames(normCounts_by_CellType[[10]])))]
 return(normCounts_by_CellType)





  return(round(pb_all),round(pb_all_byCellType))
}

cpm.20 <- function_cpm_pseudobulk(my.se.20,20,2)




