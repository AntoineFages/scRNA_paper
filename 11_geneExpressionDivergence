#!/usr/bin/env Rscript
#Script 11. R script for calculating interspecific gene expression divergence

library(Seurat)
library(sparseMatrixStats)
library(SingleCellExperiment)
library(ggplot2)
library(viridis)
library(scuttle)
library(Augur)

##### Read input files #####
#Read Seurat object
my.se <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final.rds'))

#Define cell population colours
CellTypes<-c('enterocytes 1','enterocytes 2','LREs','BEST4 cells','proliferating secretory cells','goblet cells','Tuft cells','enteroendocrine cells','epithelial DCs','DCs','macrophages 1','macrophages 2','eosinophils','T cells 1','T cells 2','T cells 3','T cells 4','T cells 5','B cells 1','B cells 2','RBCs','mesenchymal cells','endothelial cells','cycling cells')
colours_CellTypes<-c("#FF7F00","#FE9F38","#FDBF6F","#FED47D","#1F78B4","#5299C6","#84B9D7","#A6CEE3","#B8C0DD","#CAB2D6", "#B295C7","#9A78B8","#6A3D9A","#D6EE91","#CAE98F","#BEE48C","#B2DF8A","#A0D67C","#33A02C","#33A04C","#E31A1C","#FB9A99","#F18499","grey20")
Idents(my.se) <- factor(Idents(my.se),levels=CellTypes)
my.se$CellTypes <- Idents(my.se)
names(colours_CellTypes) <- CellTypes

#Species in dataset
species_included<-unique(my.se@meta.data$orig.ident.2)

my.se.20 <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final_20CellsMaxPerPseudo.rds')) #Seurat object downsampled to 20 cells exactly per cell population and species

##### Data pseudobulk cpm normalisation #####
#Function pseudobulk cpm normalisation 
function_cpm_pseudobulk <- function(my.se,minNcells) {
  Idents(my.se)<-my.se$CellTypes

  #Extract raw counts and metadata to create SingleCellExperiment object
  counts_all< - GetAssayData(object = my.se, assay="RNA",slot = "counts")

  #Set up metadata as desired for aggregation and DE analysis
  meta.data_all<-my.se@meta.data
  meta.data_all$orig.ident.2<-factor(my.se$orig.ident.2)

  #Create single cell experiment object
  sce_all <- SingleCellExperiment(assays=list(counts=counts_all),colData=meta.data_all)

  groups_all <- colData(sce_all)[,c("CellTypes","orig.ident.2")]
  groups_all_byCellType <- meta.data_all[,c("CellTypes")]

  #Aggregate across cluster-sample groups (pb_all) 
  pb_all <- aggregate.Matrix(t(counts_all), groupings = groups_all, fun = "sum")

  #Keep genes expressed in at least 2 cells in all species
  genes_ToKeep <- readRDS('XXX') #list of genes expressed in at least 2 cells in all species
  pb_all <- pb_all[rownames(pb_all) %in% genes_ToKeep,]
  pb_all <- as.matrix(t(pb_all))

  #Calculate Counts Per Million (cpm)
  pb_all <- calculateCPM(pb_all,size.factors=NULL)

  metadata$combi <- paste0(metadata$CellTypes,"_",metadata$orig.ident.2)

  #Subset samples if fewer than minNcells
  for (k in 1:length(CellTypes)){
    aux <- my.se@meta.data[my.se@meta.data$CellTypes==CellTypes[[k]],]
    for (j in 1:length(unique(aux$orig.ident.2))){
      if (plyr::count(aux$orig.ident.2)$freq[[j]] < minNcells){
        aux2 <- paste0(CellTypes[[k]],"_",plyr::count(aux$orig.ident.2)$x[[j]])
        pb_all <- pb_all[,which(colnames(pb_all)!=aux2)]
        metadata <- metadata[metadata$combi %in% colnames(pb_all),]
      }
    }
  }
return(pb_all)
}

cpm.20 <- function_cpm_pseudobulk(my.se.20,20)
cpm_by_CellType <- lapply(seq_along(CellTypes), function(i) cpm.20[,grep(CellTypes[[i]],colnames(cpm.20))])

#Make sure epithelial DCs are not contained in the 10th matrix of cpm_by_CellType (DCs)
cpm_by_CellType[[10]] <- cpm_by_CellType[[10]][,-c(grep(CellTypes[[9]],colnames(cpm_by_CellType[[10]])))]

#Rename column names of each cpm matrix in cpm_by_CellType
for (i in 1:length(cpm_by_CellType)){
  colnames(cpm_by_CellType[[i]]) <- sub(".*_", "", colnames(cpm_by_CellType[[i]]))
}

#Remove outliers with too few reads
cpm_by_CellType[[2]] <- cpm_by_CellType[[2]][,colnames(cpm_by_CellType[[2]])!='Julorn']
cpm_by_CellType[[3]] <- cpm_by_CellType[[3]][,colnames(cpm_by_CellType[[3]])!='Hapmic']
cpm_by_CellType[[5]] <- cpm_by_CellType[[5]][,colnames(cpm_by_CellType[[5]])!='Julorn']
cpm_by_CellType[[10]] <- cpm_by_CellType[[10]][,colnames(cpm_by_CellType[[10]])!='Cphfro']
cpm_by_CellType[[10]] <- cpm_by_CellType[[10]][,colnames(cpm_by_CellType[[10]])!='Hapmic']
cpm_by_CellType[[20]] <- cpm_by_CellType[[20]][,colnames(cpm_by_CellType[[20]])!='Hapmic']

##### Method 1. EVEE-tool MSGED #####
#EVEE-tool function to calculate Mean Squared Gene Expression Distance across species, within each cell population (MSGED)
EVEE_distance_analysis <- function(exp){
  exp <- exp[,colnames(exp)!='Orenil']
  index <- data.frame(colnames(exp),colnames(exp))
  data = exp
  result <- list()
  for (k in 1:ncol(exp)){
  residuals = c()
  print(k)
  refSpecies <- colnames(exp)[[k]]
  print(refSpecies)
  ref = as.matrix(data[,index[,1] == refSpecies])
  if (sum(index[,1] == refSpecies) == 1) {
    ref.mean = ref
    rownames(ref.mean) = rownames(data)
  } else {
    ref.mean = as.matrix(apply(ref, 1, function(x) mean(x, na.rm=T)))
  }

  cat("Processing...\n")
  for (i in 1:ncol(data)) {
    cat("\t")
    cat(colnames(data)[i])
    cat("\n")
    other = as.matrix(data[,i])
    ref.data = ref.mean[ref.mean > 0 & other > 0,]
    other.data = other[ref.mean > 0 & other > 0,]
    t = cbind(log10(ref.data+1), log10(other.data+1))
    t = t[apply(t, 1, function(x) sum(is.na(x)))  == 0,]
    m = prcomp(t)
    res = m$x[,2]
    r = res[rownames(data)]
    if (m$rotation[2,2]<0) r = r*-1
    residuals = cbind(residuals, r)
  }
  colnames(residuals) = colnames(data)
  rownames(residuals) = rownames(data)
  print('ok')
    result[[k]] <- lapply(seq_along(colnames(residuals)), function(j) mean((residuals[,j][!(is.na(residuals[,j]))])^2))
    result[[k]]<-unlist(result[[k]])
    names(result[[k]]) <- paste0(refSpecies,'_',colnames(residuals))
  }
  return(result)
}

distances_cpm <- lapply(seq_along(cpm_by_CellType), function(j) EVEE_distance_analysis(cpm_by_CellType[[j]]))

##### Model MSGED #####
#Model MSGED as a function of genomic distance (substitutions)

#input for genomic distances (from Ronco et al. 2021)
f5_dist <- read.table('~/f5.dists_based_on_callability.txt')
f5_dist_melt <- rstatix::cor_gather(f5_dist)
f5_dist_melt <- as.data.frame(f5_dist_melt)
f5_dist_melt <- readRDS('~/f5.dists_melt_based_on_callability.rds')
f5_dist_melt$speciesPair <- paste0(f5_dist_melt$var1,"_",f5_dist_melt$var2)

#Merge cpm distances and genomic distances into one dataframe that I call 'df'
lengths_unlist <- lapply(seq_along(distances_cpm), function(i) length(unlist(distances_cpm[[i]])))
distances_unlist <- unlist(unlist(distances_cpm))
df <- data.frame(distances_unlist,names(distances_unlist)) #create df based on gene expression distances
colnames(df) <- c('Exp','Pair')
df$CellTypes <- rep(CellTypes,lengths_unlist) #add cell population information to df
df$dist <- f5_dist_melt[match(df$Pair,f5_dist_melt$speciesPair),]$cor #add genomic distances to df
df <- na.omit(df) 
df <- df[df$dist>0,] #make sure only pairs of distinct species are included
df$CellTypes <-factor(df$CellTypes,levels=CellTypes)

df$logExp <- log(df$Exp) #calculate log-transformation of gene expression distance
df$logdist <- log(df$dist) #calculate log-transformation of genomic distance

#Create one data frame for each cell population based on the df dataframe
df_celltype <- lapply(CellTypes, function(x) df[df$CellTypes == x,])

#Remove cell populations with low number of species represented by 20 cells or more: eosinophils, T cells 5, B cells 2, red blood cells, endothelial cells, cycling cells
colours_CellTypes<-c("#FF7F00","#FE9F38","#FDBF6F","#FED47D","#1F78B4","#5299C6","#84B9D7","#A6CEE3","#B8C0DD","#CAB2D6", "#B295C7","#9A78B8",
                    "#6A3D9A","#D6EE91","#CAE98F","#BEE48C","#B2DF8A","#A0D67C","#33A02C","#33A04C","#E31A1C","#FB9A99","#F18499","grey20")
palette(colours_CellTypes)
colours_CellTypes<-colours_CellTypes[-c(13,18,20,21,23,24)]
palette(colours_CellTypes)
df_celltype <- df_celltype[-c(13,18,20,21,23,24)]

#Plot these
plot(y=df$Exp,x=df$dist, xlab="Dist", ylab="Exp", pch=19, cex=0.75, las=1, col=df$CellTypes, type="n",xlim=c(0,1.8e7),ylim=c(0,0.09))

#Add distances based on real points
for (i in 1:length(df_celltype)) {
   tmpmod <- lm(logExp ~ logdist, df_celltype[[i]])
   predmod_data = data.frame(logdist = seq(log(1838510), log(16261581), 0.1 ))
   predmod_data$logExp = predict(tmpmod, newdata=predmod_data)
   points(exp(predmod_data$logdist), exp(predmod_data$logExp), type="l", col=i,lwd=2)
}

#Add extrapolations to outside of range
for (i in 1:length(df_celltype)) {
  tmpmod <- lm(logExp ~ logdist, df_celltype[[i]])
  predmod_data = data.frame(logdist = seq(log(1e5), log(1.8e7), 0.1 ))
  predmod_data$logExp = predict(tmpmod, newdata=predmod_data)
  points(exp(predmod_data$logdist), exp(predmod_data$logExp), type="l", col=i,lwd=2,lty=2)
}


##### Method 2. Augur #####
#As input, Seurat object with maximum 2000 UMIs per cell
my.se.down <- readRDS(paste0(path_to_output_of_integration,'integrated_dataset_final_down2000UMIsPerCell.rds'))
count.matrix <- GetAssayData(my.se.down,assay='RNA',slot='counts')
meta.data <- my.se.down@meta.data

path_to_Augur_output <- 'XXX' #path to put the output of Augur

exclude.cellpop <- c('eosinophils','T cells 5','B cells 2','RBCs','endothelial cells','cycling cells')
meta.data <- meta.data[meta.data$orig.ident.2 !='Orenil',]
meta.data <- meta.data[!(meta.data$CellTypes %in% exclude.celltypes),]
meta.data <- meta.data[meta.data$orig.ident.2 %in% species1 | meta.data$orig.ident.2 %in% species2,]
count.matrix <- count.matrix[,colnames(count.matrix) %in% rownames(meta.data)]

for (species1 in 

augur <- calculate_auc(count.matrix, n_threads=8, meta=meta.data, cell_type_col = "CellTypes", label_col = "orig.ident.2",subsample_size=10,min_cells=10,n_subsamples=40,show_progress=TRUE)
saveRDS(augur, paste0(path_to_Augur_output,'Augur_',species1,'_',species2,'.rds'))








